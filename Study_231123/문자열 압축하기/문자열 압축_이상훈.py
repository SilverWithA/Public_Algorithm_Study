문자열 압축
문제 설명
데이터 처리 전문가가 되고 싶은 "어피치"는 문자열을 압축하는 방법에 대해 공부를 하고 있습니다. 최근에 대량의 데이터 처리를 위한 간단한 비손실 압축 방법에 대해 공부를 하고 있는데, 문자열에서 같은 값이 연속해서 나타나는 것을 그 문자의 개수와 반복되는 값으로 표현하여 더 짧은 문자열로 줄여서 표현하는 알고리즘을 공부하고 있습니다.
간단한 예로 "aabbaccc"의 경우 "2a2ba3c"(문자가 반복되지 않아 한번만 나타난 경우 1은 생략함)와 같이 표현할 수 있는데, 이러한 방식은 반복되는 문자가 적은 경우 압축률이 낮다는 단점이 있습니다. 예를 들면, "abcabcdede"와 같은 문자열은 전혀 압축되지 않습니다. "어피치"는 이러한 단점을 해결하기 위해 문자열을 1개 이상의 단위로 잘라서 압축하여 더 짧은 문자열로 표현할 수 있는지 방법을 찾아보려고 합니다.

예를 들어, "ababcdcdababcdcd"의 경우 문자를 1개 단위로 자르면 전혀 압축되지 않지만, 2개 단위로 잘라서 압축한다면 "2ab2cd2ab2cd"로 표현할 수 있습니다. 다른 방법으로 8개 단위로 잘라서 압축한다면 "2ababcdcd"로 표현할 수 있으며, 이때가 가장 짧게 압축하여 표현할 수 있는 방법입니다.

다른 예로, "abcabcdede"와 같은 경우, 문자를 2개 단위로 잘라서 압축하면 "abcabc2de"가 되지만, 3개 단위로 자른다면 "2abcdede"가 되어 3개 단위가 가장 짧은 압축 방법이 됩니다. 이때 3개 단위로 자르고 마지막에 남는 문자열은 그대로 붙여주면 됩니다.

압축할 문자열 s가 매개변수로 주어질 때, 위에 설명한 방법으로 1개 이상 단위로 문자열을 잘라 압축하여 표현한 문자열 중 가장 짧은 것의 길이를 return 하도록 solution 함수를 완성해주세요.

제한사항
s의 길이는 1 이상 1,000 이하입니다.
s는 알파벳 소문자로만 이루어져 있습니다.
입출력 예
s	result
"aabbaccc"	7
"ababcdcdababcdcd"	9
"abcabcdede"	8
"abcabcabcabcdededededede"	14
"xababcdcdababcdcd"	17
입출력 예에 대한 설명
입출력 예 #1

문자열을 1개 단위로 잘라 압축했을 때 가장 짧습니다.

입출력 예 #2

문자열을 8개 단위로 잘라 압축했을 때 가장 짧습니다.

입출력 예 #3

문자열을 3개 단위로 잘라 압축했을 때 가장 짧습니다.

입출력 예 #4

문자열을 2개 단위로 자르면 "abcabcabcabc6de" 가 됩니다.
문자열을 3개 단위로 자르면 "4abcdededededede" 가 됩니다.
문자열을 4개 단위로 자르면 "abcabcabcabc3dede" 가 됩니다.
문자열을 6개 단위로 자를 경우 "2abcabc2dedede"가 되며, 이때의 길이가 14로 가장 짧습니다.

입출력 예 #5

문자열은 제일 앞부터 정해진 길이만큼 잘라야 합니다.
따라서 주어진 문자열을 x / ababcdcd / ababcdcd 로 자르는 것은 불가능 합니다.
이 경우 어떻게 문자열을 잘라도 압축되지 않으므로 가장 짧은 길이는 17이 됩니다.

==========================================================

# 흠.. 완전탐색? 
# 문자열을 1개단위 ~ len(s)의 길이 단위 만큼으로 나눴을때 중 최소값으로 표현?
# i개의 단위로 나눠진 문자열의 갯수를 담아둔 list에서 최솟값을 뽑으면

def solution(s):
    answer = []
    
    if len(s) == 1: # 문자열이 1일때는 1을 반환
        return 1
    
    for i in range(1, len(s)//2 + 1): # 반복문 수행 절반을 넘어설수 없으니까 len(s)//2 +1
        m = ''  # m 이라는 새로운 문자열
        cnt = 1 # 카운트 문자앞에 붙을 숫자니까 1부터 시작
        unit = s[:i] # n개 단위로 잘라 비교할 유닛
        
        for j in range(i, len(s)+i, i):  # i ~ i개씩 탐색을 하는데 len(s) 도 탐색이 되야 하기에 len(s)+i를 해줌
            if unit == s[j:i+j]: # 잘라 놓은 유닛이 s[j:i+j]이면 반복되는 거니까 cnt+1
                cnt += 1
            else:               # 같지 않을때
                if cnt != 1:    # cnt 가 1이 아니면 반복된 적이 있었다면
                    m = m + str(cnt) + unit 
                else:
                    m = m + unit
                    
                unit = s[j:j+i]
                cnt = 1 
                
        answer.append(len(m))
    return min(answer)

"""
완전히 이해 하지는 못했다 풀이를 보면서 이해를 하려 노력 했지만
두번째 for 문 마지막에 있는 unit 과 cnt 의 값을 바꿔주는 이유를 잘 모르겠다.
또한 로직은 이해 했으나 문제를 온전히 이해 하지 못한것 같다.
"""



